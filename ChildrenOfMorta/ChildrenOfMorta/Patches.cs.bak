using System;
using System.Diagnostics.CodeAnalysis;
using HarmonyLib;
using UnityEngine;
using UnityEngine.UI;
using Zyklus.CameraManager;
using Zyklus.InputHandling;
using Zyklus.Managers;
using Zyklus.Player;
using Zyklus.UI;

namespace ChildrenOfMorta;

[HarmonyPatch]
[SuppressMessage("ReSharper", "InconsistentNaming")]
public static class Patches
{
    private static Vector3 ExpandScale { get; } = new(100, 1, 1);

    internal static void UpdateAll()
    {
        UpdateMiniMap();
        UpdateNotificationPopup();
        UpdateOnlineMenu();
        UpdatePlayerHud();
        UpdateTutorial();
        UpdateSaveWarning();
        UpdateTooltipMenu();
        UpdateNotificationMenu();
        UpdateSaveIndicator();
    }


    [HarmonyPostfix]
    [HarmonyPatch(typeof(UIManager), nameof(UIManager.PushMenuForAll))]
    [HarmonyPatch(typeof(CameraManagerComponent), nameof(CameraManagerComponent.ReInitializeCameras))]
    private static void Trigger_Update()
    {
        UpdateAll();
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(PopUpMenu), nameof(PopUpMenu.Show), new Type[] { })]
    [HarmonyPatch(typeof(PopUpMenu), nameof(PopUpMenu.Awake))]
    private static void PopUpMenu_Awake(ref PopUpMenu __instance)
    {
        var t = __instance.transform.Find("Main");
        var path = Util.GetFullPath(t);
        Util.UpdateObjectPosition(path, false);
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(ConstOverlayComponent), nameof(ConstOverlayComponent.Awake))]
    private static void ConstOverlayComponent_Awake(ref ConstOverlayComponent __instance)
    {
        UpdateSaveIndicator();
    }

    private static void UpdateSaveIndicator()
    {
        Util.UpdateObjectPosition("UI Parliament/Const Overlay/Save Indicator", false, true);
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(SaveWarningMenu), nameof(SaveWarningMenu.Awake))]
    private static void SaveWarningMenu_Awake(ref SaveWarningMenu __instance)
    {
        UpdateSaveWarning();
    }

    private static void UpdateSaveWarning()
    {
        var saveWarning = GameObject.Find("UI Parliament/UI Parent/Menus/Save warning menu/Main/Background");
        if (saveWarning != null) saveWarning.transform.localScale = ExpandScale;
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(OnlineMenu), nameof(OnlineMenu.Awake))]
    private static void OnlineMenu_Awake(ref OnlineMenu __instance)
    {
        UpdateOnlineMenu();
    }

    private static void UpdateOnlineMenu()
    {
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Menus/Online Menu/Main", false);
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(NotificationPopupManager), nameof(NotificationPopupManager.Awake))]
    [HarmonyPatch(typeof(NotificationPopupManager), nameof(NotificationPopupManager.Show))]
    private static void NotificationPopupManager_Awake(ref NotificationPopupManager __instance)
    {
        UpdateNotificationPopup();
    }

    private static void UpdateNotificationPopup()
    {
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Notification Popup Manager/Main", false);
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(PlayerHUDComponent), nameof(PlayerHUDComponent.Awake))]
    private static void PlayerHUDComponent_Awake(ref PlayerHUDComponent __instance)
    {
        UpdatePlayerHud();
    }

    private static void UpdatePlayerHud()
    {
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Players HUD/P1/Static Canvas/Main", false);
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Players HUD/P1/Dynamic Canvas/Main", false);
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Players HUD/P2/Static Canvas/Main", false);
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Players HUD/P2/Dynamic Canvas/Main", false);
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(MapManagerComponent), nameof(MapManagerComponent.Awake))]
    private static void MapManagerComponent_Awake(ref MapManagerComponent __instance)
    {
        UpdateMiniMap();
    }


    private static void UpdateMiniMap()
    {
        Util.UpdateObjectPosition("UI Parliament/Map Manager/matrix_1_minimap/Main", true);
        Util.UpdateObjectPosition("UI Parliament/Map Manager/matrix_1_maximap/Main", true);
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(Image), nameof(Image.OnEnable))]
    private static void Image_OnEnable(ref Image __instance)
    {
        if (__instance.name.Equals("overlay") || __instance.name.Equals("Legend-Back") || __instance.name.Equals("Back Grayout") || __instance.name.Equals("Hit post effect"))
        {
            if (__instance.name.Equals("Hit post effect"))
            {
                var transform = __instance.transform;
                var localScale = transform.localScale;
                localScale = new Vector3(100f, localScale.y, localScale.z);
                transform.localScale = localScale;
            }
            else
            {
                __instance.transform.localScale = ExpandScale;
            }
        }
    }

//public FunctionalityTutorialWindow ShowCharacterTutorial(PlayerCharacterEnum character, RunTutorialsProceduralEvent.OnTutorialFinished clear_callback, FloorStartAction.DoneDelegate callback, PlayerLocalNumber player = PlayerLocalNumber.Local1, UserUIActionEnum button = UserUIActionEnum.AcceptButton)
  //	public FunctionalityTutorialWindow ShowCharacterTutorial(string text, RunTutorialsProceduralEvent.OnTutorialFinished clear_callback, FloorStartAction.DoneDelegate callback, PlayerLocalNumber player = PlayerLocalNumber.Local1, UserUIActionEnum button = UserUIActionEnum.AcceptButton)
    [HarmonyPostfix]
    [HarmonyPatch(typeof(FunctionalityTutorialWindow), nameof(FunctionalityTutorialWindow.Awake))]
    [HarmonyPatch(typeof(FunctionalityTutorialWindow), nameof(FunctionalityTutorialWindow.Start))]
    [HarmonyPatch(typeof(FunctionalityTutorialWindow), nameof(FunctionalityTutorialWindow.Show))]
    [HarmonyPatch(typeof(ItemsTutorialWindow), nameof(ItemsTutorialWindow.ShowRune))]
    [HarmonyPatch(typeof(ItemsTutorialWindow), nameof(ItemsTutorialWindow.ShowCharm))]
    [HarmonyPatch(typeof(ItemsTutorialWindow), nameof(ItemsTutorialWindow.ShowNormal))]
    [HarmonyPatch(typeof(ItemsTutorialWindow), nameof(ItemsTutorialWindow.ShowCharacterTutorial), typeof(PlayerCharacterEnum), typeof(RunTutorialsProceduralEvent.OnTutorialFinished), typeof(FloorStartAction.DoneDelegate), typeof(PlayerLocalNumber), typeof(UserUIActionEnum))]
    [HarmonyPatch(typeof(ItemsTutorialWindow), nameof(ItemsTutorialWindow.ShowCharacterTutorial), typeof(string), typeof(RunTutorialsProceduralEvent.OnTutorialFinished), typeof(FloorStartAction.DoneDelegate), typeof(PlayerLocalNumber), typeof(UserUIActionEnum))]
    private static void FunctionalityTutorialWindow_Awake(ref FunctionalityTutorialWindow __instance)
    {
        UpdateTutorial();
    }

    private static void UpdateTutorial()
    {
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Menus/Tutorial Windows menu/Charm Tutorial/Main", false);
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Menus/Tutorial Windows menu/Character Tutorial/Main", false);
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Menus/Tutorial Windows menu/Rune Tutorial/Main", false);
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(TooltipMenu), nameof(TooltipMenu.Awake))]
    [HarmonyPatch(typeof(TooltipMenu), nameof(TooltipMenu.Show))]
    private static void TooltipMenu_Awake(ref TooltipMenu __instance)
    {
        UpdateTooltipMenu();
    }

    private static void UpdateTooltipMenu()
    {
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Menus/Run Tooltip Menu/Main", false);
    }

    [HarmonyPostfix]
    [HarmonyPatch(typeof(NotificationMenu), nameof(NotificationMenu.Awake))]
    [HarmonyPatch(typeof(NotificationMenu), nameof(NotificationMenu.Show))]
    private static void NotificationMenu_Awake(ref TooltipMenu __instance)
    {
        UpdateNotificationMenu();
    }

    private static void UpdateNotificationMenu()
    {
        Util.UpdateObjectPosition("UI Parliament/UI Parent/Menus/Notification Menu/Main", false);
    }
}