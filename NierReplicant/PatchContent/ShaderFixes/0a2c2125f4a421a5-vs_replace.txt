// UI Shader

cbuffer cbScene : register(b0)
{
  float4x4 mtxViewProj : packoffset(c0);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float3 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float3 v3 : COLOR1,
  float2 v4 : COLOR2,
  float3 v5 : COLOR3,
  uint v6 : USERDEF0,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0,
  out float2 p1 : COLOR2,
  out float4 o2 : COLOR0,
  out float3 o3 : COLOR1,
  out float3 o4 : COLOR3,
  out uint o5 : FLAGS0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

// Original UI is in 16:9
float orig_aspect_width = 16.0;
float orig_aspect_height = 9.0;

// Our aspects for scaling
float new_aspect_width = 32.0;
float new_aspect_height = 9.0;

  r0.xy = v0.xy;
  r0.z = 1;
  r0.w = dot(r0.xyz, mtxViewProj._m03_m13_m33);
  o0.z = v0.z * r0.w;
  o0.w = r0.w;
  o0.x = dot(r0.xyz, mtxViewProj._m00_m10_m30);
  o0.y = dot(r0.xyz, mtxViewProj._m01_m11_m31);
  o1.xy = v1.xy;
  p1.xy = v4.xy;
  o2.xyzw = v2.xyzw;
  o3.xyz = v3.xyz;
  o4.xyz = v5.xyz;
  o5.x = v6.x;

  // And scale
  o0.x *= (orig_aspect_width / new_aspect_width);
  o0.y *= (orig_aspect_height / new_aspect_height);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//   using 3Dmigoto v1.2.73 on Mon Apr 26 14:14:56 2021
//
//
// Buffer Definitions:
//
// cbuffer cbScene
// {
//
//   float4x4 mtxViewProj;              // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbScene                           cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz
// TEXCOORD                 0   xy          1     NONE   float   xy
// COLOR                    0   xyzw        2     NONE   float   xyzw
// COLOR                    1   xyz         3     NONE   float   xyz
// COLOR                    2   xy          4     NONE   float   xy
// COLOR                    3   xyz         5     NONE   float   xyz
// USERDEF                  0   x           6     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy
// COLOR                    2     zw        1     NONE   float     zw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// COLOR                    1   xyz         3     NONE   float   xyz
// COLOR                    3   xyz         4     NONE   float   xyz
// FLAGS                    0   x           5     NONE    uint   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_input v3.xyz
dcl_input v4.xy
dcl_input v5.xyz
dcl_input v6.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.x
dcl_temps 1
mov r0.xy, v0.xyxx
mov r0.z, l(1.000000)
dp3 r0.w, r0.xyzx, cb0[3].xywx
mul o0.z, r0.w, v0.z
mov o0.w, r0.w
dp3 o0.x, r0.xyzx, cb0[0].xywx
dp3 o0.y, r0.xyzx, cb0[1].xywx
mov o1.xy, v1.xyxx
mov o1.zw, v4.xxxy
mov o2.xyzw, v2.xyzw
mov o3.xyz, v3.xyzx
mov o4.xyz, v5.xyzx
mov o5.x, v6.x
ret
// Approximately 14 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
