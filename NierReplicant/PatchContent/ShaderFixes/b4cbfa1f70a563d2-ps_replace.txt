//Player hair&fur
cbuffer SystemCbScene : register(b0)
{
  row_major float3x4 gMtxView : packoffset(c0);
  float4x4 gMtxProj : packoffset(c3);
  float4x4 gMtxViewProj : packoffset(c7);
  row_major float3x4 gMtxInvView : packoffset(c11);
  float4x4 gMtxInvProj : packoffset(c14);
  float4x4 gMtxInvViewProj : packoffset(c18);
  row_major float3x4 gMtxPrevView : packoffset(c22);
  float4x4 gMtxPrevProj : packoffset(c25);
  float4x4 gMtxPrevViewProj : packoffset(c29);
  row_major float3x4 gMtxPrevInvView : packoffset(c33);
  float4x4 gMtxPrevInvProj : packoffset(c36);
  float4x4 gMtxPrevInvViewProj : packoffset(c40);
  float2 gUVToView : packoffset(c44);
  float gNearClip : packoffset(c44.z);
  float gFarClip : packoffset(c44.w);
  float3 gCameraPos : packoffset(c45);
  float gCameraFov : packoffset(c45.w);
  float gTime : packoffset(c46);
  float gDeltaTime : packoffset(c46.y);
  float2 gScreenSize : packoffset(c46.z);
  float3 gFrustumCorner : packoffset(c47);
  float gExposureNormalizeFactor : packoffset(c47.w);
  float gLeafDiffuseAlgorithmMix : packoffset(c48);
  float gGiLightEvaluateScale : packoffset(c48.y);
  float2 gEyeLightFadeDistance : packoffset(c48.z);
  float3 gCameraDir : packoffset(c49);
  float gEyeLightScale : packoffset(c49.w);
  float gSkinDualLobeSpecularMix : packoffset(c50);
  float gEyeSpecularityForIBL : packoffset(c50.y);
  float gScleraRoughnessMix : packoffset(c50.z);
  float gScleraRoughness : packoffset(c50.w);
  float gScleraLightScale : packoffset(c51);
  float3 gIrisCausticsLightDir : packoffset(c51.y);
  float gIlluminanceEmissiveInfluence : packoffset(c52);
  float gEyeEmissiveCubeScale : packoffset(c52.y);
  float gIrisCausticsRatio : packoffset(c52.z);
  int gIrisCausticsOverride : packoffset(c52.w);
  float gIrisConcavityScaleParam : packoffset(c53);
  float gIrisConcavityPowerParam : packoffset(c53.y);
  float4 gEyeFixedLightOffsetDirection : packoffset(c54);
  float3 gCameraUp : packoffset(c55);
  float3 gCameraSide : packoffset(c56);
  float gEyeSpecularityScale : packoffset(c56.w);
}

cbuffer CbApp : register(b1)
{
  float4 gAppRimColor : packoffset(c0) = {0,0,0,0};
  float gAppDitherAlpha : packoffset(c1) = {1};
  float gAppChangeColor : packoffset(c1.y) = {0};
  float gAppScanlineRimIntensity : packoffset(c1.z) = {1};
  float4 gAppFlashEmissive : packoffset(c2) = {0,0,0,0};
  float3 gAppColorMatrixRow0 : packoffset(c3) = {1,0,0};
  float3 gAppColorMatrixRow1 : packoffset(c4) = {0,1,0};
  float3 gAppColorMatrixRow2 : packoffset(c5) = {0,0,1};
  float4 gAppObjectWorldMtxRow0 : packoffset(c6) = {1,0,0,0};
  float4 gAppObjectWorldMtxRow1 : packoffset(c7) = {0,1,0,0};
  float4 gAppObjectWorldMtxRow2 : packoffset(c8) = {0,0,1,0};
  float3 gAppObjectBoundingBoxHalfExtent : packoffset(c9) = {1,1,1};
  float gAppDeltaTimeScale : packoffset(c9.w) = {1};
  float4 gAppScanlineParam : packoffset(c10) = {0,0,0,0};
  float gVertexSmallGlitchFreq : packoffset(c11) = {1};
  float2 gVertexSmallGlitchRange : packoffset(c11.y) = {0,0.899999976};
  float gVertexSmallGlitchOffsetScale : packoffset(c11.w) = {2};
  float gVertexBigGlitchFreq : packoffset(c12) = {0.5};
  float2 gVertexBigGlitchRange : packoffset(c12.y) = {-0.899999976,-0.5};
  float gVertexBigGlitchOffsetScale : packoffset(c12.w) = {1};
}

cbuffer CbHair : register(b3)
{
  float gAlphaThreshold : packoffset(c0) = {1};
  float gWetness : packoffset(c0.y) = {0};
  float gPorosity : packoffset(c0.z) = {1};
  float gEmissiveIntensity : packoffset(c0.w) = {1};
  float gPrimaryScale : packoffset(c1) = {0.200000003};
  float gSecondaryWidth : packoffset(c1.y) = {4};
  float gApplyRateAO : packoffset(c1.z) = {0};
  float gOffsetTime : packoffset(c1.w) = {0};
  float gMaterialRimLightScale : packoffset(c2) = {1};
  float gMaterialReflectorScale : packoffset(c2.y) = {1};
  int gDissolveAlgorithmType : packoffset(c2.z) = {0};
  float gDissolveAlphaThreshold0 : packoffset(c2.w) = {0};
  float gDissolveAlphaThreshold1 : packoffset(c3) = {0};
  float3 gAppDissolveSphereCenter : packoffset(c3.y) = {0,0,0};
  float gAppDissolveSphereRadius : packoffset(c4) = {0};
  float2 gDissolveUVScale : packoffset(c4.y) = {0,0};
  float2 gDissolveUVSpeed : packoffset(c5) = {0,0};
  float gDissolveTransitionAlphaRate : packoffset(c5.z) = {0};
  float3 gDissolveTransitionEmissive0 : packoffset(c6) = {0,0,0};
  float gDissolveTransitionEmissiveIntensity0 : packoffset(c6.w) = {0};
  float3 gDissolveTransitionEmissive1 : packoffset(c7) = {0,0,0};
  float gDissolveTransitionEmissiveIntensity1 : packoffset(c7.w) = {0};
  int gEnableDissolveNoisePointSampling : packoffset(c8) = {0};
  float2 gDissolveNoiseTextureSize : packoffset(c8.y) = {512,512};
  float gDissolveSphereFadeOffsetDistance : packoffset(c8.w) = {0};
}

SamplerState texBaseColor_s_s : register(s0);
Texture2D<float4> texBaseColor : register(t0);
Texture2D<float4> texDissolveNoise : register(t1);

#define cmp -

void main(float4 v0 : SV_POSITION0, float3 v1 : NORMAL0, float4 v2 : TEXCOORD0,  float4 v3 : POSITION_WS0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;
  float fDitheringHackThickness = 0.37; //Adjust thickness here.

  r0.x = texBaseColor.Sample(texBaseColor_s_s, v2.xy).w;
  r0.y = cmp(gDissolveAlgorithmType == 1);
  if (r0.y != 0) {
    r0.y = gTime + -gOffsetTime;
    r0.y = gAppDeltaTimeScale * r0.y;
    r0.z = cmp(0 < gDissolveSphereFadeOffsetDistance);
    r1.xyz = float3(1,1,1) / gDissolveSphereFadeOffsetDistance;
    r0.z = r0.z ? r1.x : 1;
    r0.w = cmp(0 < gAppDissolveSphereRadius);
    r0.w = r0.w ? 0 : 3.40282306e+038;
    r2.xyz = -gAppDissolveSphereCenter.xyz + v3.xyz;
    r1.x = dot(r2.xyz, r2.xyz);
    r1.x = sqrt(r1.x);
    r1.x = -gAppDissolveSphereRadius + r1.x;
    r0.w = max(r1.x, r0.w);
    r0.z = r0.w * r0.z;
    r0.z = min(1, r0.z);
    r1.xw = gDissolveUVSpeed.xy * r0.yy;
    r1.xw = v2.xy * gDissolveUVScale.xy + r1.xw;
    r2.xy = gDissolveNoiseTextureSize.xy * r1.xw;
    r2.xy = trunc(r2.xy);
    r1.yz = r2.xy * r1.yz;
    r1.xy = gEnableDissolveNoisePointSampling ? r1.yz : r1.xw;
    r1.xy = texDissolveNoise.Sample(texBaseColor_s_s, r1.xy).xy;
    r0.y = r0.x * r0.w;
    r0.y = r0.y * r0.z;
    r0.yz = saturate(r1.xy * r0.yy);
    r0.y = cmp(r0.y < gDissolveAlphaThreshold0);
    r0.z = cmp(r0.z < gDissolveAlphaThreshold1);
    r0.y = (int)r0.z | (int)r0.y;
    if (r0.y != 0) discard;
  }
  r0.y = cmp(r0.x < -1);
  if (r0.y != 0) discard;
  r0.yz = float2(0.25,0.25) * v0.xy;
  r1.xy = cmp(r0.yz >= -r0.yz);
  r0.yz = frac(abs(r0.yz));
  r0.yz = r1.xy ? r0.yz : -r0.yz;
  r0.yz = float2(4,4) * r0.yz;
  r0.yz = (uint2)r0.yz;
  r0.y = (uint)r0.y << 2;
  r0.y = (int)r0.z + (int)r0.y;
  r0.z = cmp(gAppDitherAlpha < fDitheringHackThickness);
  if (r0.z != 0) discard;
  r0.x = cmp(r0.x < fDitheringHackThickness);
  if (r0.x != 0) discard;
  return;
}